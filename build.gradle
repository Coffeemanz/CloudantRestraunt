apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'

def servletVersion = '3.1.0'
def springVersion = '4.3.5.RELEASE'
def cloudantVersion = '2.9.0'
def slf4jVersion = '1.7.22'
def httpClientVersion = '4.5.2'
def log4jVersion = '2.7'

def jsonPathVersion = '2.2.0'
def mockitoVersion = '2.2.11'
def hamcrestVersion = '1.3'
def junitVersion = '4.12'

def jacksonVersion = '2.8.8'
def jsonViewVersion = '0.14'


repositories {
    jcenter()
}
dependencies {
    compile('javax.servlet:javax.servlet-api:' + servletVersion)

    compile('org.springframework:spring-core:' + springVersion)
    compile('org.springframework:spring-context:' + springVersion)
    compile('org.springframework:spring-beans:' + springVersion)
    compile('org.springframework:spring-jdbc:' + springVersion)
    compile('org.springframework:spring-web:' + springVersion)
    compile('org.springframework:spring-webmvc:' + springVersion)

    compile('org.slf4j:slf4j-api:' + slf4jVersion)
    compile('org.slf4j:jcl-over-slf4j:' + slf4jVersion)
    compile('org.apache.logging.log4j:log4j-core:' + log4jVersion)
    compile('org.apache.logging.log4j:log4j-api:' + log4jVersion)
    compile('org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion)
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.8'
    compile('com.fasterxml.jackson.core:jackson-databind:' + jacksonVersion)
    compile ('com.monitorjbl:json-view:' + jsonViewVersion)

    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'

    compile('com.cloudant:cloudant-client:' + cloudantVersion)

    testCompile('org.springframework:spring-test:' + springVersion)
    testCompile('junit:junit:' + junitVersion) {
        exclude module: 'hamcrest-core'
    }

    testCompile('org.hamcrest:hamcrest-all:' + hamcrestVersion)

    testCompile('org.mockito:mockito-core:' + mockitoVersion)

}


buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Sonatype Nexus Snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.1-SNAPSHOT'
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.2'
    }
}

apply plugin: 'liberty'
apply plugin: 'cloudfoundry'


war {
    archiveName = project.name + '-dev.war'
}

liberty {
    installDir = libertyInstallDir
    serverName = libertyServerName

    undeploy {
        include = [project.name, project.name + '-dev'].join(', ')
    }

    deploy {
        file = 'build/libs/' + project.name + ('-dev.war')
    }
}

task deployLocal(dependsOn: ['undeploy', 'clean', 'war', 'deploy']) {
    clean.shouldRunAfter undeploy
    war.shouldRunAfter clean
    deploy.shouldRunAfter war
}

cloudfoundry {
    target = 'https://api.w3ibm.bluemix.net'
    domain = 'w3bmix.ibm.com'

    space = 'dev'
    file = new File('build/libs/' + project.name + '-dev.war')
    application = project.name
    memory = 512
    instances = 1
}

task deployBluemix(dependsOn: ['clean','war', 'cfPush']) {
    war.shouldRunAfter clean
    cfPush.shouldRunAfter war
}